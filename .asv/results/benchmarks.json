{
    "benchmarks.BasicPhysipy.mem_unit": {
        "code": "class BasicPhysipy:\n    def mem_unit(self):\n        \"\"\"\n        Memory consumption of the meter\n        \"\"\"\n        return m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "name": "benchmarks.BasicPhysipy.mem_unit",
        "param_names": [],
        "params": [],
        "type": "memory",
        "unit": "bytes",
        "version": "76ca626c1a763b3788bf35f26cdcaf4f81e15d26f3ad75c9d363bc23c137362c"
    },
    "benchmarks.BasicPhysipy.time_QuantityAdd": {
        "code": "class BasicPhysipy:\n    def time_QuantityAdd(self):\n        q = m + m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_QuantityAdd",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ef58d8c8f9bbb231e62b5b3b37055be92526fb01eeac10aa3f72e35d5ee9963d",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_QuantityCreation": {
        "code": "class BasicPhysipy:\n    def time_QuantityCreation(self):\n        q = physipy.Quantity(1, physipy.Dimension(\"M\"))\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_QuantityCreation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1ef49fbd3644623d4a91028b0c7a57965fa5073eeed9624035bcc64c8a324fdf",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_QuantityCreationByArray": {
        "code": "class BasicPhysipy:\n    def time_QuantityCreationByArray(self):\n        q = self.arr * m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_QuantityCreationByArray",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "30831440b7877bdb6cc9d5a18f95030f969bef1785464ef22c0f2917b5cd047f",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_QuantityCreationByExpr": {
        "code": "class BasicPhysipy:\n    def time_QuantityCreationByExpr(self):\n        q = physipy.Quantity(1, physipy.Dimension(\"M/L\"))\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_QuantityCreationByExpr",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b56bbd9890f1a6e636b5ca6dc5602666f2aedf5cf746bb71e7e8c6545b842029",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_QuantityCreationByMul": {
        "code": "class BasicPhysipy:\n    def time_QuantityCreationByMul(self):\n        q = 2 * m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_QuantityCreationByMul",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d67f937f17d3a062406e40d51b01ae780af8fd83a2e87046d6d55a17ea78dee6",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_arr_scalar_op_add": {
        "code": "class BasicPhysipy:\n    def time_arr_scalar_op_add(self): arr_m + m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_arr_scalar_op_add",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "df1d643e31a2caf0ff890ab8eb11a060d4220413c7ecf02a658ed1e4e4c3fee3",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_arr_scalar_op_div": {
        "code": "class BasicPhysipy:\n    def time_arr_scalar_op_div(self): arr_m / m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_arr_scalar_op_div",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "373396897884bf2b454a7196d1f025b62ff08a7a68b5c1c332ca1d7bba3f35d1",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_arr_scalar_op_mul": {
        "code": "class BasicPhysipy:\n    def time_arr_scalar_op_mul(self): arr_m * m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_arr_scalar_op_mul",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0a6ad044deb3abbf8691b9c0cd130daeb189ad0151423703413998c4a260294e",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_arr_scalar_op_pow": {
        "code": "class BasicPhysipy:\n    def time_arr_scalar_op_pow(self): arr_m ** 1\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_arr_scalar_op_pow",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bdb64fe4dc41e42f9fcde60bd6d2e3a13437e5e528200ae309b8111b99de77f8",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_arr_scalar_op_sub": {
        "code": "class BasicPhysipy:\n    def time_arr_scalar_op_sub(self): arr_m - m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_arr_scalar_op_sub",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "af3caaeb69ace6cea22058dd28df55f529f30821a7b4aa7084919acc3d7f4472",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_arr_scalar_op_truediv": {
        "code": "class BasicPhysipy:\n    def time_arr_scalar_op_truediv(self): arr_m // m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_arr_scalar_op_truediv",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8e44a0722ff7af32ce092ba5e103ede6a11b4485162ddb5688dd26e56aa6f437",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_scalar_op_add": {
        "code": "class BasicPhysipy:\n    def time_scalar_op_add(self): m + m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_scalar_op_add",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c967057839cb6b53550716b94b3078c6a26034cd2b0734ca357d6c2323295949",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_scalar_op_div": {
        "code": "class BasicPhysipy:\n    def time_scalar_op_div(self): m / m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_scalar_op_div",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "060415ee7ae9fdb2a3ce6778d6be5d9197b35a17b7aad767b575f46d2abe3b5c",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_scalar_op_mul": {
        "code": "class BasicPhysipy:\n    def time_scalar_op_mul(self): m * m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_scalar_op_mul",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d7e69391886846ca7db2bffcc98b82b5c41ba64ac5a63cdb9e43823d6ebf4020",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_scalar_op_pow": {
        "code": "class BasicPhysipy:\n    def time_scalar_op_pow(self): m ** 1\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_scalar_op_pow",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "047e2e9068c1ef582ade1fbf4874049d46aa5cbd1b838f35a1743c9e3e51e203",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_scalar_op_sub": {
        "code": "class BasicPhysipy:\n    def time_scalar_op_sub(self): m - m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_scalar_op_sub",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "45d68f3e658bd25dbbb43f890d200593d835b6ba0da7f0a8cc7b54378dc78aa0",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_scalar_op_truediv": {
        "code": "class BasicPhysipy:\n    def time_scalar_op_truediv(self): m // m\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_scalar_op_truediv",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d7684742d3a708cba6a666cc1eda898f7eda31727b0aa6829d03a1a9744ef91d",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_use_case": {
        "code": "class BasicPhysipy:\n    def time_use_case(self):\n        x = arr * m\n        x2 = sca * s**2\n        y = x*x2/pi * np.sum(x**2) + 3*m**3*s**2\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_use_case",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "08eef822fbe1776e53e8b60ec0a887ea1aed398597f93aabc4b72b2142fe1af5",
        "warmup_time": -1
    },
    "benchmarks.BasicPhysipy.time_use_case2": {
        "code": "class BasicPhysipy:\n    def time_use_case2(self):\n        from physipy import units, constants, K\n        mum = units[\"mum\"]\n        hp = constants[\"h\"]\n        c = constants[\"c\"]\n        kB = constants[\"k\"]\n    \n        def plancks_law(lmbda, Tbb):\n            return 2*hp*c**2/lmbda**5 * 1/(np.exp(hp*c/(lmbda*kB*Tbb))-1)\n        lmbdas = ech_lmbda_mum*mum\n        Tbb = 300*K\n        integral = np.trapz(plancks_law(lmbdas, Tbb), x=lmbdas)\n\n    def setup(self):\n        self.arr = np.arange(10)",
        "min_run_count": 2,
        "name": "benchmarks.BasicPhysipy.time_use_case2",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "910cbd69c73e254c5c3b1c81f3271bc4453810135482de1ca4f999699ed5fa73",
        "warmup_time": -1
    },
    "benchmarks.BenchDimension.time_dimension_div": {
        "code": "class BenchDimension:\n    def time_dimension_div(self):\n        self.length / self.mass\n\n    def setup(self):\n        self.length = Dimension(\"L\")\n        self.mass = Dimension(\"M\")\n        self.time = Dimension(\"T\")",
        "min_run_count": 2,
        "name": "benchmarks.BenchDimension.time_dimension_div",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "011e1d42422506ef727c80713b7b0c9db72e54fb13abeb12bcf56afc1294728b",
        "warmup_time": -1
    },
    "benchmarks.BenchDimension.time_dimension_eq": {
        "code": "class BenchDimension:\n    def time_dimension_eq(self):\n        self.length == self.length\n\n    def setup(self):\n        self.length = Dimension(\"L\")\n        self.mass = Dimension(\"M\")\n        self.time = Dimension(\"T\")",
        "min_run_count": 2,
        "name": "benchmarks.BenchDimension.time_dimension_eq",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cf1adf5f6e4cc2dcad4c9ec4a7dd7adb22d451ec2a22022c02d03be645540de3",
        "warmup_time": -1
    },
    "benchmarks.BenchDimension.time_dimension_mul": {
        "code": "class BenchDimension:\n    def time_dimension_mul(self):\n        self.length * self.mass\n\n    def setup(self):\n        self.length = Dimension(\"L\")\n        self.mass = Dimension(\"M\")\n        self.time = Dimension(\"T\")",
        "min_run_count": 2,
        "name": "benchmarks.BenchDimension.time_dimension_mul",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a56dd579065cb172ef8a694d675e91c5588212439a5e2b0cb952039e3f3dd408",
        "warmup_time": -1
    },
    "benchmarks.BenchDimension.time_dimension_pow": {
        "code": "class BenchDimension:\n    def time_dimension_pow(self):\n        self.length**2\n\n    def setup(self):\n        self.length = Dimension(\"L\")\n        self.mass = Dimension(\"M\")\n        self.time = Dimension(\"T\")",
        "min_run_count": 2,
        "name": "benchmarks.BenchDimension.time_dimension_pow",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "46313936f7fbd3cf13f078012868681e2e50a95ff8515d545ede6e1da7e63a25",
        "warmup_time": -1
    },
    "imports.timeraw_import_constants": {
        "code": "def timeraw_import_constants():\n    return r\"from physipy import constants\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_constants",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9b458b9d6c3893bb97062df57745e4a2f222c83480c11a933fb75d02691bcf03",
        "warmup_time": -1
    },
    "imports.timeraw_import_math": {
        "code": "def timeraw_import_math():\n    return r\"from physipy import math\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_math",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f7101cc4c4cdd3f17c027fc01b0872f6d0cdea27182a9f967b56e50f0d50d0b1",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy": {
        "code": "def timeraw_import_physipy():\n    return r\"import physipy\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bacc6a373ebd8de8c4954920c7259d43547dc472ffb5c5869efb2fd183cec16c",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy_calculus": {
        "code": "def timeraw_import_physipy_calculus():\n    return r\"from physipy import calculus\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy_calculus",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7b0487200f7b1f22a74c149ac5a82418630ef7785116cf381678f877c5b57961",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy_dimension": {
        "code": "def timeraw_import_physipy_dimension():\n    return r\"from physipy.quantity import dimension\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy_dimension",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c611a4afdcf63d06f82836baf3b2f59c999a962e003de28cf74d6d46ca99750a",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy_plot": {
        "code": "def timeraw_import_physipy_plot():\n    return r\"from physipy.quantity import _plot\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy_plot",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "43d3cdad461d182c1604c5318ca2a87baa49e0b46bc755809cc15266180e91f1",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy_quantity": {
        "code": "def timeraw_import_physipy_quantity():\n    return r\"from physipy.quantity import quantity\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy_quantity",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "06f4091be36a8a86315eeb6f0c58b89ba7076f809e6608f5b06aa2cef89e9839",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy_units": {
        "code": "def timeraw_import_physipy_units():\n    return r\"from physipy.quantity import units\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy_units",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "56c429deb9d3b0ab7befa3f7f675615b91ec28f0d08a66d0c688aa4b8030c731",
        "warmup_time": -1
    },
    "imports.timeraw_import_physipy_utils": {
        "code": "def timeraw_import_physipy_utils():\n    return r\"from physipy.quantity import utils\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_physipy_utils",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a19960d74ffda856741cb86710f37e479c3d99bd4e8144682704ae36d6f962d8",
        "warmup_time": -1
    },
    "imports.timeraw_import_units": {
        "code": "def timeraw_import_units():\n    return \"\"\"from physipy import units\"\"\"",
        "min_run_count": 2,
        "name": "imports.timeraw_import_units",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "abdb3434c6ce8ac791b51a2d8b1e50fcc20c629572b48d06adcb339769e8e394",
        "warmup_time": -1
    },
    "version": 2
}